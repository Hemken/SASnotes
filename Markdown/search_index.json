[["index.html", "SASmarkdown 1 The SASmarkdown Package 1.1 Installation 1.2 Set up the SAS Engines 1.3 Use an Engine", " SASmarkdown Doug Hemken November 2022 1 The SASmarkdown Package 1.1 Installation The SASmarkdown package contains several alternative SAS engines, and some helper functions to use with them. It adds to the functionality already in the knitr package. You can install the SASmarkdown package from CRAN as you would any R package. The current version on CRAN is SASmarkdown 0.8.0. In Rstudio you install from the Packages pane, or in the Console type: install.packages(&quot;SASmarkdown&quot;) This package can also be found at http://github.com/Hemken/SASmarkdown . (You can suggest changes or report bugs there.) To install the latest version of SASmarkdown, use remotes::install_github(&quot;Hemken/SASmarkdown&quot;) Alternatively, use install.packages(&quot;https://www.ssc.wisc.edu/~hemken/SASworkshops/SASmarkdown_0.8.0.tar.gz&quot;, repos=NULL, type=&quot;source&quot;) # or, for Windows # install.packages(&quot;https://www.ssc.wisc.edu/~hemken/SASworkshops/SASmarkdown_0.8.0.zip&quot;, # repos=NULL) For the R documentation, type help(package=&quot;SASmarkdown&quot;) For basic usage information, keep reading here. 1.2 Set up the SAS Engines To load and use the SAS engines, use the R library function in an preliminary code block in your document. ```{r} library(SASmarkdown) ``` In your document this would look like: library(SASmarkdown) ## SAS found at C:/Program Files/SASHome/SASFoundation/9.4/sas.exe ## SAS engines are now ready to use. When you load the SASmarkdown package, eight SAS engines are defined and ready to use. They all run your SAS code, but return different output into your document. These are used in pairs. sas - this returns the SAS code you ran and ordinary (\"listing\") output saslog - this returns the SAS log instead of your code, and ordinary SAS output sashtml - this returns SAS code and SAS HTML output sashtmllog - this returns the SAS log and SAS HTML output sashtml5 - this returns SAS code and SAS HTML output with inline graphics sashtml5log - this returns the SAS log and SAS HTML output saspdf - this returns SAS code and SAS LaTeX output with PDF graphics saspdflog - this returns the SAS log and SAS LaTeX output 1.3 Use an Engine These engines all require the location of SAS on your computer. In addition, you can set command line options for SAS to use. When you load SASmarkdown via library you will see a message telling you that the SAS executable was found, or that SAS was not found. If SAS was not found you need to specify the executable location yourself. You only need to set the engines you will be using. This might be done like this: saspath &lt;- &quot;C:/Program Files/SASHome/SASFoundation/9.4/sas.exe&quot; sasopts &lt;- &quot;-nosplash -ls 75&quot; # &#39;-nosplash&#39; fails in Unix terminals knitr::opts_chunk$set(engine.path=list(sas=saspath, saslog=saspath), engine.opts=list(sas=sasopts, saslog=sasopts), comment=NA) 1.3.1 \"sas\" engine You can use these SAS engines in much the same way as any language engine in knitr. In your document include a code block like this: ```{sas} proc means data=sashelp.class; run; ``` Which gives you proc means data=sashelp.class; run; The MEANS Procedure Variable N Mean Std Dev Minimum Maximum ------------------------------------------------------------------------- Age 19 13.3157895 1.4926722 11.0000000 16.0000000 Height 19 62.3368421 5.1270752 51.3000000 72.0000000 Weight 19 100.0263158 22.7739335 50.5000000 150.0000000 ------------------------------------------------------------------------- For more explanation and examples, please continue with chapter 2. Written using SASmarkdown version 0.8.0. knitr version 1.40. R version 4.2.2 (2022-10-31 ucrt). "],["ch2.html", "2 Using SASmarkdown 2.1 Introduction 2.2 Background 2.3 Including SAS Code in your Document 2.4 Running SAS 2.5 HTML Output and Graphics", " 2 Using SASmarkdown 2.1 Introduction Using SASmarkdown in RStudio (or in R) gives you a method for writing simple documents which include the results of executing SAS commands. Both the document text and the source SAS code are in one file. This is especially good for writing simple documents that explain statistical scripting tasks. One way to think of this is as an extended and more readable version of writing comments in your source code. 2.2 Background Markdown is a language for formatting fairly simple documents using just a few text symbols. It is designed to be easy to read and write. You may already be using some Markdown (in email, for instance) and not even realize it - it's that simple! If you are not already familiar with Markdown see John Gruber's Markdown article. R Markdown extends Markdown by allowing you to include blocks of code in one of several programming languages. The code is evaluated, and both the code and it's results are included in a Markdown document. To read more about the details of R Markdown see RStudio's R Markdown webpages RStudio uses an R package called knitr to render documents written in R Markdown. We will discuss some of the nuances of evaluating SAS code in subsequent articles. The documentation for knitr can be found in the book R Markdown: The Definitive Guide, in R's Help, or from this web page. RStudio makes it easy to process your R Markdown document to produce a final HTML, pdf, or Word document. After you have written your R Markdown document, RStudio processes it with a simple click of a button! The focus in this book will be on producing HTML (web) pages. Some caveats: Using SAS with R Markdown is not quite as graceful as using R with R Markdown, but the SASmarkdown package automates some techniques for putting together simple documents. Note that this is not a friendly environment for extensively debugging problems in your SAS code (although with the right options you can see any SAS error messages in the SAS log file). If your code is at all complicated, you should work out the details in SAS first, then bring it into RStudio to develop your documentation! Also note that some of the set up for using SAS and SASmarkdown is done in R. The basics are pretty simple, but to modify the default process it helps to be bilinugal in R and SAS. 2.3 Including SAS Code in your Document SAS code is included in your R Markdown document in a block called a \"code chunk\". When you click on Rstudio's Knit button, your initial document (your \"source\" document) is processed by the R function knitr. This evaluates your code, collects the output, and produces a Markdown document. This Markdown document is then processed by a program called Pandoc to produce your final HTML document. It helps to understand how knitr evaluates your SAS code. Knitr writes out your code into a file, and then submits that file to SAS to be run in batch mode. This produces SAS log and SAS \"listing\" output. The listing output is then read back into knitr and used to produce a block of output in the Markdown document. The SAS files are ordinarily temporary. 2.3.1 Limitations There are several limitations that you will have to work with: Each code chunk runs separately as a SAS batch job, they are not processed as a single running session like R code. Interspersing text with executed code is not (quite) as simple as when running R code. For example, suppose you have a DATA step early in your document, and then want to use that data in a later code chunk. In the later code chunk, SAS will have begun a new session (a new batch job) and \"forgotten\" the first DATA step. SAS will not find the data, so SAS will send an error message to R Markdown. The default message R Markdown passes back to you will only tell you that SAS did not exit properly. This difficulty is overcome with a chunk option automated through SASmarkdown, collectcode. Text (listing) output is simple to use. If you want to use SAS's HTML output instead of listing output, or if you want to include SAS graphics in your final document, a different SAS engine makes this fairly simple (sashtml or sashtml5). If you want to use SASs LaTeX output, yet another SAS engine does this (saspdf). A third limitation is that knitr returns two blocks of text to your document - by default, the SAS code and the listing output. If you want to show your reader the content on the SAS log file, another SAS engine, saslog makes this easy. Additional engines enable log output with HTML and LaTeX output. 2.3.2 HTML or PDF Document? You can choose between producing a final document as HTML or PDF when you click on the Knit button in RStudio. Longtime SAS users will find that SAS listing output looks as expected in both HTML and PDF documents. (Newer SAS users may not be familiar with listing output, since it is no longer the default when using SAS interactively. R Markdown runs SAS in batch mode, so listing output is produced by default.) SAS HTML output can be included in a final HTML document, but renders poorly as a PDF document when run through R Markdown. Likewise, SAS LaTeX output can be included to produce a final PDF document, but renders poorly in an HTML document. To go beyond fairly simple PDF documents, you may want to investigate SAS's StatRep or Lenth's SASWeave. 2.3.3 Document Setup An initial code chunk sets up the SAS engines for use in your document. ```{r} library(SASmarkdown) ``` 2.3.4 Code Chunk Setup The minimal code chunk setup to run SAS is just as easy. ```{sas} /* SAS code here */ ``` 2.4 Running SAS Here then, is a simple example as it might appear in your final document. The code chunk that is written in your document is: ```{sas} proc means data=sashelp.class; run; ``` And appears in your document like this: proc means data=sashelp.class; run; The MEANS Procedure Variable N Mean Std Dev Minimum Maximum ------------------------------------------------------------------------- Age 19 13.3157895 1.4926722 11.0000000 16.0000000 Height 19 62.3368421 5.1270752 51.3000000 72.0000000 Weight 19 100.0263158 22.7739335 50.5000000 150.0000000 ------------------------------------------------------------------------- 2.5 HTML Output and Graphics There are two advantages to using SAS's HTML output, rather than the listing output. First, results tables become HTML tables instead of just monospaced text, and they will dynamically size themselves to the end user's window. Second, you can include SAS graphics in your final document with a minimum of fuss. To use SAS's html output, use the sashtml or sashtml5 engine, as described in a later chapter. An example as you would write it: ```{sashtml} proc corr data=sashelp.class plots=matrix; run; ``` And as it appears in your document: proc corr data=sashelp.class plots=matrix; run; 3 Variables: Age Height Weight Simple Statistics Variable N Mean Std Dev Sum Minimum Maximum Age 19 13.31579 1.49267 253.00000 11.00000 16.00000 Height 19 62.33684 5.12708 1184 51.30000 72.00000 Weight 19 100.02632 22.77393 1901 50.50000 150.00000 Pearson Correlation Coefficients, N = 19Prob &gt; |r| under H0: Rho=0   Age Height Weight Age 1.00000   0.81143 &lt;.0001 0.74089 0.0003 Height 0.81143 &lt;.0001 1.00000   0.87779 &lt;.0001 Weight 0.74089 0.0003 0.87779 &lt;.0001 1.00000   Scatter Plot Matrix Scatter Plot Matrix 60 80 100 120 140 50 55 60 65 70 11 12 13 14 15 16 60 80 100 120 140 50 55 60 65 70 11 12 13 14 15 16 Weight Height Age Scatter Plot Matrix Written using SASmarkdown version 0.8.0. knitr version 1.40. R version 4.2.2 (2022-10-31 ucrt). "],["ch3.html", "3 Linking Code Blocks 3.1 Introduction 3.2 Load SASmarkdown 3.3 Example: Linking Code Blocks", " 3 Linking Code Blocks 3.1 Introduction By default, the SAS code blocks (\"chunks\") in an R Markdown document are each run as a separate batch file - they are not connected to each other. However, often we want to write about a sequence of connected steps, interspersing code, results, and explanatory text. We could simply repeat the necessary code in each code chunk, perhaps hiding part of the code with a selective echo chunk option (a useful technique to know about). However, it is even simpler to automate this code repetition by using the collectcode chunk option. We simply need to mark those code chunks we need re-executed in subsequent chunks. 3.2 Load SASmarkdown ```{r} library(SASmarkdown) ``` 3.3 Example: Linking Code Blocks Suppose your first code block is a DATA step, explaining how to calculate a new variable. Specify the collectcode chunk option to have this DATA step \"carry over\" in (all of) the following code blocks. This is written as: ```{sas, collectcode=TRUE} data class; set sashelp.class; bmi = 703*weight/height**2; run; ``` In your document, the result is: data class; set sashelp.class; bmi = 703*weight/height**2; run; Next, we have a separate code block that uses the data. This is just a plain SAS code block. ```{sas} proc means data=class; var bmi; run; ``` In your document this is: proc means data=class; var bmi; run; The MEANS Procedure Analysis Variable : bmi N Mean Std Dev Minimum Maximum ------------------------------------------------------------------ 19 17.8632519 2.0926193 13.4900007 21.4296601 ------------------------------------------------------------------ Written using SASmarkdown version 0.8.0. knitr version 1.40. R version 4.2.2 (2022-10-31 ucrt). "],["ch4.html", "4 SAS HTML output 4.1 Set up 4.2 Using the 'sashtml' engine 4.3 Using the 'sashtml5' engine", " 4 SAS HTML output SAS can produce output in several different formats. The traditional SAS output, \"listing\" output, is written as plain text. This means that \"tables\" depend on mono-spaced fonts and the width of the end user's screen to display properly. It also makes it more work to include graphics in your document. However, the SAS Output Delivery System (ODS) makes it easy to produce HTML output. Using HTML output from SAS makes it easy to have tables that retain their structure despite variations in end user fonts and screen sizes. And HTML output makes it easy to include graphics in documents. 4.1 Set up This is set up by using a different \"language engine\" in knitr. The initial document setup using the SASmarkdown package is the same. library(SASmarkdown) 4.2 Using the 'sashtml' engine Invoke the sashtml engine for code chunks. What you write is: ```{sashtml} proc corr data=sashelp.class plots=matrix; run; ``` This produces: proc corr data=sashelp.class plots=matrix; run; 3 Variables: Age Height Weight Simple Statistics Variable N Mean Std Dev Sum Minimum Maximum Age 19 13.31579 1.49267 253.00000 11.00000 16.00000 Height 19 62.33684 5.12708 1184 51.30000 72.00000 Weight 19 100.02632 22.77393 1901 50.50000 150.00000 Pearson Correlation Coefficients, N = 19Prob &gt; |r| under H0: Rho=0   Age Height Weight Age 1.00000   0.81143 &lt;.0001 0.74089 0.0003 Height 0.81143 &lt;.0001 1.00000   0.87779 &lt;.0001 Weight 0.74089 0.0003 0.87779 &lt;.0001 1.00000   Scatter Plot Matrix Scatter Plot Matrix 60 80 100 120 140 50 55 60 65 70 11 12 13 14 15 16 60 80 100 120 140 50 55 60 65 70 11 12 13 14 15 16 Weight Height Age Scatter Plot Matrix The default SASmarkdown style for HTML and HTML5 output is journal. To invoke a different SAS style, specify it with: ```{sashtml5 style_example, saveSAS=TRUE} ods html5 style=htmlblue; proc corr data=sashelp.class plots=matrix; run; ``` to produce: 3 Variables: Age Height Weight Simple Statistics Variable N Mean Std Dev Sum Minimum Maximum Age 19 13.31579 1.49267 253.00000 11.00000 16.00000 Height 19 62.33684 5.12708 1184 51.30000 72.00000 Weight 19 100.02632 22.77393 1901 50.50000 150.00000 Pearson Correlation Coefficients, N = 19Prob &gt; |r| under H0: Rho=0   Age Height Weight Age 1.00000   0.81143 &lt;.0001 0.74089 0.0003 Height 0.81143 &lt;.0001 1.00000   0.87779 &lt;.0001 Weight 0.74089 0.0003 0.87779 &lt;.0001 1.00000   Scatter Plot Matrix Scatter Plot Matrix 60 80 100 120 140 50 55 60 65 70 11 12 13 14 15 16 60 80 100 120 140 50 55 60 65 70 11 12 13 14 15 16 Weight Height Age Scatter Plot Matrix Use ```{sas} proc template; list styles / store=sashelp.tmplmst; run; ``` To see a list of SAS HTML styles. 4.3 Using the 'sashtml5' engine If you use the sashtml5 engine, your graphs are embedded within your HTML file, rather than being stored as separate image files. This can make file management easier. Written using SASmarkdown version 0.8.0. knitr version 1.40. R version 4.2.2 (2022-10-31 ucrt). "],["ch5.html", "5 SAS Logs 5.1 Set up 5.2 Using the saslog engine 5.3 Using the sashtmllog and sashtml5log engines 5.4 SAS ERROR messages", " 5 SAS Logs SAS is unusual software in that it generates two distinct output streams. In addition to the typical tables and graphs (in a variety of formats, including text and html), SAS echos your code and writes notes and messages in a separate log file. Most software directs all of this into just one document. From time to time it is useful to show the reader what they will find in a log file. How do we get knitr to include that? There are several approaches we could take here, depending on just what we need to show the reader. If we would like to show the log in place of the code (since it echos the code...), we can use the saslog engine. 5.1 Set up Set up your document. library(SASmarkdown) 5.2 Using the saslog engine To show the reader the log in place of a code block, use the saslog engine. ```{saslog} proc means data=sashelp.class; run; ``` In your final document this looks like: 2 proc means data=sashelp.class; 3 run; NOTE: There were 19 observations read from the data set SASHELP.CLASS. NOTE: The PROCEDURE MEANS printed page 1. NOTE: PROCEDURE MEANS used (Total process time): real time 0.03 seconds cpu time 0.03 seconds The MEANS Procedure Variable N Mean Std Dev Minimum Maximum ------------------------------------------------------------------------- Age 19 13.3157895 1.4926722 11.0000000 16.0000000 Height 19 62.3368421 5.1270752 51.3000000 72.0000000 Weight 19 100.0263158 22.7739335 50.5000000 150.0000000 ------------------------------------------------------------------------- Cleaning up and making the log more readable is the topic of the next chapter. 5.3 Using the sashtmllog and sashtml5log engines We can have similar results with HTML output. ```{sashtmllog} proc means data=sashelp.class; run; ``` In your final document this looks like: 6 proc means data=sashelp.class; 7 run; NOTE: There were 19 observations read from the data set SASHELP.CLASS. NOTE: PROCEDURE MEANS used (Total process time): real time 1.67 seconds cpu time 0.00 seconds Variable N Mean Std Dev Minimum Maximum Age Height Weight 19 19 19 13.3157895 62.3368421 100.0263158 1.4926722 5.1270752 22.7739335 11.0000000 51.3000000 50.5000000 16.0000000 72.0000000 150.0000000 5.4 SAS ERROR messages SAS does not always exit with an error when it encounters problems, but when it does, you should see the log in your document instead of the code. 5.4.1 Semantic and Execution Errors Semantic errors (typos etc.) and execution errors (e.g. the data set you call does not exist) cause SAS to return an error status when SAS finishes. This will automatically cause SASmarkdown to switch from the sas engine to the saslog engine. In this example, trying to use WORK data without any data set there, SAS produces an ERROR, and no output is produced.) ```{sas procerror} proc means data=cars; run; ``` Which produces: 2 proc means data=cars; ERROR: File WORK.CARS.DATA does not exist. 3 run; NOTE: The SAS System stopped processing this step because of errors. NOTE: PROCEDURE MEANS used (Total process time): real time 0.00 seconds cpu time 0.00 seconds ERROR: Errors printed on page 1. 5.4.2 Mathematical Errors Division by zero produces error flags within the DATA step, but does not cause SAS to return an error code when it finishes. The sas engine gives us the usual output. To see the DATA step ERROR, explicitly switch to the saslog engine. ```{saslog divzero} data class; set sashelp.class(obs=5); age0 = age/0; keep age age0; run; proc print data=class; run; ``` which produces both the log and the PROC PRINT output. 2 data class; 3 set sashelp.class(obs=5); 4 age0 = age/0; 5 keep age age0; 6 run; NOTE: Division by zero detected at line 4 column 15. Name=Alfred Sex=M Age=14 Height=69 Weight=112.5 age0=. _ERROR_=1 _N_=1 NOTE: Division by zero detected at line 4 column 15. Name=Alice Sex=F Age=13 Height=56.5 Weight=84 age0=. _ERROR_=1 _N_=2 NOTE: Division by zero detected at line 4 column 15. Name=Barbara Sex=F Age=13 Height=65.3 Weight=98 age0=. _ERROR_=1 _N_=3 NOTE: Division by zero detected at line 4 column 15. Name=Carol Sex=F Age=14 Height=62.8 Weight=102.5 age0=. _ERROR_=1 _N_=4 NOTE: Division by zero detected at line 4 column 15. Name=Henry Sex=M Age=14 Height=63.5 Weight=102.5 age0=. _ERROR_=1 _N_=5 NOTE: Mathematical operations could not be performed at the following places. The results of the operations have been set to missing values. Each place is given by: (Number of times) at (Line):(Column). 5 at 4:15 NOTE: There were 5 observations read from the data set SASHELP.CLASS. NOTE: The data set WORK.CLASS has 5 observations and 2 variables. NOTE: DATA statement used (Total process time): real time 0.00 seconds cpu time 0.00 seconds 7 8 proc print data=class; 9 run; NOTE: There were 5 observations read from the data set WORK.CLASS. NOTE: The PROCEDURE PRINT printed page 1. NOTE: PROCEDURE PRINT used (Total process time): real time 0.03 seconds cpu time 0.01 seconds Obs Age age0 1 14 . 2 13 . 3 13 . 4 14 . 5 14 . The same results are produced with the html and htmllog or the html5 and html5log engines. Written using SASmarkdown version 0.8.0. knitr version 1.40. R version 4.2.2 (2022-10-31 ucrt). "],["ch6.html", "6 Cleaning Up SAS Log Output 6.1 Intro 6.2 Setup 6.3 Default Log 6.4 Global Cleanup 6.5 Chunk Cleanup", " 6 Cleaning Up SAS Log Output 6.1 Intro To gain more control over just what part of the SAS log we show the reader, we have several options. If you are fluent in SAS, it will probably occur to you that there are SAS options to suppress NOTES (options NONOTES;) suppress just the procedure time (options NOSTIMER;) suppress the source code echo (options NOSOURCE;), as well as an option to tune how verbose the ERROR messages are (options ERROR=0; or more). (There is no option to suppress WARNINGs.) 6.2 Setup Set up your document by loading SASmarkdown. library(SASmarkdown) 6.3 Default Log First, consider an example using the saslog engine without any of these options, giving us the default log output: ```{saslog} proc means data=sashelp.class(keep=height); run; ``` The result is: 2 proc means data=sashelp.class(keep=height); 3 run; NOTE: There were 19 observations read from the data set SASHELP.CLASS. NOTE: The PROCEDURE MEANS printed page 1. NOTE: PROCEDURE MEANS used (Total process time): real time 0.55 seconds cpu time 0.01 seconds The MEANS Procedure Analysis Variable : Height N Mean Std Dev Minimum Maximum ------------------------------------------------------------------ 19 62.3368421 5.1270752 51.3000000 72.0000000 ------------------------------------------------------------------ 6.4 Global Cleanup To clean up the SAS log for every code chunk in your document, add the appropriate SAS option to the SASmarkdown engine options in an R chunk. ```{r} sasopts &lt;- &quot;-nosplash -ls 75 -nonotes&quot; knitr::opts_chunk$set(engine.opts=list(sas=sasopts, saslog=sasopts)) ``` Repeating our SAS example, the result now looks like this: 2 proc means data=sashelp.class(keep=height); 3 run; The MEANS Procedure Analysis Variable : Height N Mean Std Dev Minimum Maximum ------------------------------------------------------------------ 19 62.3368421 5.1270752 51.3000000 72.0000000 ------------------------------------------------------------------ 6.5 Chunk Cleanup There are two ways to cleanup the log per chunk. The SAS way is to include a cleanup option in your code chunk. (You can hide this option from your readers with the echo=-1 chunk option.) ```{saslog, echo=-1} options nostimer; proc means data=sashelp.class(keep=height); run; ``` Modifying our SAS example with a different option, the result looks like this: 3 proc means data=sashelp.class(keep=height); 4 run; NOTE: There were 19 observations read from the data set SASHELP.CLASS. NOTE: The PROCEDURE MEANS printed page 1. The MEANS Procedure Analysis Variable : Height N Mean Std Dev Minimum Maximum ------------------------------------------------------------------ 19 62.3368421 5.1270752 51.3000000 72.0000000 ------------------------------------------------------------------ (Notice that SAS TIMER is also a NOTE.) 6.5.1 SASproctime Then, to suppress the procedure time notes your code chunk looks like this: ```{saslog notimer, SASproctime=FALSE} proc means data=sashelp.class(keep=height); run; ``` In your document, the result looks like this: 2 proc means data=sashelp.class(keep=height); 3 run; NOTE: There were 19 observations read from the data set SASHELP.CLASS. NOTE: The PROCEDURE MEANS printed page 1. The other two options work in a similar manner. 6.5.2 SASecho This suppresses the code echo. ```{saslog noecho, SASecho=FALSE, results=&quot;hide&quot;} proc means data=sashelp.class(keep=height); run; ``` In your document, the result looks like this: 1 The SAS System NOTE: There were 19 observations read from the data set SASHELP.CLASS. NOTE: The PROCEDURE MEANS printed page 1. NOTE: PROCEDURE MEANS used (Total process time): real time 0.58 seconds cpu time 0.03 seconds 6.5.3 SASnotes This suppresses the notes. ```{saslog nonotes, SASnotes=FALSE, results=&quot;hide&quot;} proc means data=sashelp.class(keep=height); run; ``` In your document, the result looks like this: 2 proc means data=sashelp.class(keep=height); 3 run; Written using SASmarkdown version 0.8.0. knitr version 1.40. R version 4.2.2 (2022-10-31 ucrt). "],["ch7.html", "7 SAS LaTeX", " 7 SAS LaTeX Written using SASmarkdown version 0.8.0. knitr version 1.40. R version 4.2.2 (2022-10-31 ucrt). "],["ch8.html", "8 SAS National Language Support 8.1 Intro 8.2 Setup 8.3 Default Language 8.4 French 8.5 Chinese 8.6 Documentation", " 8 SAS National Language Support 8.1 Intro SAS allows you to work with a wide variety language encodings, and provides user interfaces to a handful of these encodings as well. This also means that your SAS output might be encoded in many different ways. However Rmarkdown assumes that all input is in the UTF-8 encoding (which should accomodate the whole variety). 8.2 Setup Set up your document by loading SASmarkdown. library(SASmarkdown) To use a language encoding that is not your default in SAS requires additional set up when SAS is started. This is accomplished by adding a -config option on the SAS command line. In Markdown this will be done through the engine.opts setting. To then read a SAS output file in a non-latin1 encoding into Rmarkdown, an encoding chunk option will be used. 8.3 Default Language Your default language depends on how you have SAS configured. In my case, SAS defaults to an English language interface, and a latin1 (or wlatin1 on Windows) language encoding. First, consider an example that gives us the default listing output: proc means data=sashelp.class(keep=height); run; The MEANS Procedure Analysis Variable : Height N Mean Std Dev Minimum Maximum ------------------------------------------------------------------ 19 62.3368421 5.1270752 51.3000000 72.0000000 ------------------------------------------------------------------ 8.4 French I can switch to a French encoding by pointing SAS to the French language configuration file. sasopts &lt;- &quot;-nosplash -ls 75 -config &#39;C:/Program Files/SASHome/SASFoundation/9.4/nls/fr/sasv9.cfg&#39;&quot; knitr::opts_chunk$set(engine.opts=list(sas=sasopts, saslog=sasopts)) Because French output is also encoded in the latin1 standard, nothing special is required to use the SAS output. The result is: proc means data=sashelp.class(keep=height); run; La procédure MEANS Variable d&#39;analyse : Height N Moyenne Ec-type Minimum Maximum ------------------------------------------------------------------ 19 62.3368421 5.1270752 51.3000000 72.0000000 ------------------------------------------------------------------ And using HTML output: proc means data=sashelp.class(keep=height); run; Variable d'analyse : Height N Moyenne Ec-type Minimum Maximum 19 62.3368421 5.1270752 51.3000000 72.0000000 8.5 Chinese Switching to a Chinese encoding requires one extra step. Not only do we have to ensure that SAS produces Chinese output (this might be your default, but it is not mine), but we also have to instruct Rmarkdown to transcode from Chinese (in this case, the gbk standard) to UTF-8. So a SAS set up is sasopts &lt;- &quot;-nosplash -ls 75 -config &#39;C:/Program Files/SASHome/SASFoundation/9.4/nls/zh/sasv9.cfg&#39;&quot; knitr::opts_chunk$set(engine.opts=list(sas=sasopts, saslog=sasopts, sashtml=sasopts, sashtmllog=sasopts)) This Chinese output is also encoded in the gbk standard, so a chunk option is required to use the SAS output properly. The code chunk looks like this: ```{sas, encoding=&quot;gbk&quot;} proc means data=sashelp.class(keep=height); run; ``` The result is: proc means data=sashelp.class(keep=height); run; MEANS PROCEDURE : Height       -------------------------------------------------------------------- 19 62.3368421 5.1270752 51.3000000 72.0000000 -------------------------------------------------------------------- And with HTML output: proc means data=sashelp.class(keep=height); run; : Height       19 62.3368421 5.1270752 51.3000000 72.0000000 8.6 Documentation To see what encodings you may use for SASmarkdown, use the function iconvlist(). The result is platform dependent. To see what encodings SAS is capable of producing see Encoding Values for a SAS Session. The options again depend on your operating system (platform). To see what encoding SAS is using, 2 proc options option=encoding; 3 run; SAS (R) PROPRIETARY SOFTWARE RELEASE 9.4 TS1M6 ENCODING=EUC-CN  SAS  Be aware that the encoding name given by SAS may not match the encoding name used by R. Here, for instance, SAS calls its encoding EUC-CN, but that value fails in R (despite being in the iconvlist). After a little experimentation, I find gb2312 and gbk (an expanded version of gb2312) both appear to work. (But I dont read or speak any Chinese language, so someone tell me if my choice is wrong!) I came to these guesses by looking at the output file with the Notepad++ text editor, which guessed the file is gb2312 and by saving SAS HTML output and looking at the character set it declared, which was gbk. Written using SASmarkdown version 0.8.0. knitr version 1.40. R version 4.2.2 (2022-10-31 ucrt). "],["ch9.html", "9 Saving Intermediate SAS files 9.1 Saving SAS files 9.2 Saving Markdown and LaTeX files", " 9 Saving Intermediate SAS files You may want to save the intermediate SAS files for a variety of reasons. Perhaps you want to use your examples in a live demonstration. Perhaps you want to make your examples available for download from a website. Or perhaps you are trying to debug some issue with the code in your document, and you are not entirely sure where the problem has entered the document rendering process. Knitr produces a number of intermediate files on the way to your final document. By default, these are all temporary files. But with the appropriate options, it is possible to save any of them. This is true with all of the SAS engines. Each SAS code chunk is saved as a SAS command file, with the file extension .sas. As each SAS code chunk is evaluated, a SAS log file and a SAS output file are produced. The log file has a .log file extension. The output file can have a .lst file extension (SAS listing output), an .html file extension (an HTML fragment), or a .tex file extension (a LaTeX fragment). When all of the code chunks have been evaluated and the output has been knit into your text, a Markdown document is saved, with file extension .md. The Markdown document is then processed by Pandoc, rendering your final document. 9.1 Saving SAS files Use the saveSAS=TRUE chunk option to save each chunk. You can use this option per chunk, or set it as a global option. The SAS file names are then taken from each code chunk label. A typical chunk specification might look like this: ```{sas procmeans, saveSAS=TRUE} proc means data=sashelp.class; run; ``` This will save three intermediate files: procmeans.sas, procmeans.log, and procmeans.lst. proc means data=sashelp.class; run; If we stopped here you could see these in a file explorer. Here we'll show them with some R code. list.files(pattern=&quot;proc&quot;) [1] &quot;procmeans.log&quot; &quot;procmeans.lst&quot; &quot;procmeans.sas&quot; The raw contents of the SAS files are: SAS commands: OPTIONS NONUMBER NODATE PAGESIZE = MAX FORMCHAR = &#39;|----|+|---+=|-/&lt;&gt;*&#39; FORMDLIM=&#39; &#39;;title; proc means data=sashelp.class; run; SAS log: 1 The SAS System 10:54 Wednesday, November 30, 2022 NOTE: Copyright (c) 2016 by SAS Institute Inc., Cary, NC, USA. NOTE: SAS (r) Proprietary Software 9.4 (TS1M6) Licensed to UNIVERSITY OF WISCONSIN MADISON -SFA- T&amp;R, Site 70090197. NOTE: This session is executing on the X64_10PRO platform. NOTE: Analytical products: SAS/STAT 15.1 SAS/ETS 15.1 SAS/OR 15.1 SAS/IML 15.1 SAS/QC 15.1 NOTE: Additional host information: X64_10PRO WIN 10.0.19041 Workstation NOTE: SAS initialization used: real time 1.13 seconds cpu time 0.15 seconds NOTE: AUTOEXEC processing beginning; file is Z:\\R\\SASmarkdown_docs\\autoexec.sas. NOTE: There were 19 observations read from the data set SASHELP.CLASS. NOTE: The data set WORK.CLASS has 19 observations and 6 variables. NOTE: DATA statement used (Total process time): real time 0.00 seconds cpu time 0.00 seconds NOTE: AUTOEXEC processing completed. 1 OPTIONS NONUMBER NODATE PAGESIZE = MAX FORMCHAR = 1 ! &#39;|----|+|---+=|-/&lt;&gt;*&#39; FORMDLIM=&#39; &#39;;title; 2 proc means data=sashelp.class; 3 run; NOTE: There were 19 observations read from the data set SASHELP.CLASS. NOTE: The PROCEDURE MEANS printed page 1. NOTE: PROCEDURE MEANS used (Total process time): real time 0.56 seconds cpu time 0.03 seconds NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414 NOTE: The SAS System used: real time 2.83 seconds cpu time 0.23 seconds SAS listing: The MEANS Procedure Variable N Mean Std Dev Minimum Maximum ------------------------------------------------------------------------- Age 19 13.3157895 1.4926722 11.0000000 16.0000000 Height 19 62.3368421 5.1270752 51.3000000 72.0000000 Weight 19 100.0263158 22.7739335 50.5000000 150.0000000 ------------------------------------------------------------------------- 9.2 Saving Markdown and LaTeX files You can also save your intermediate Markdown document (and an intermediate LaTeX document if you are making a PDF) with the appropriate option in your document YAML. --- output: html_document: keep_md: yes pdf_document: keep_md: yes keep_tex: true --- "],["ch10.html", "10 SpinSAS 10.1 Special Markup 10.2 Semi-colons 10.3 Example 10.4 Processing", " 10 SpinSAS spinsas is an alternative way of processing dynamic Markdown from a SAS command file. In this form, documents are written within the comments of a SAS file. This enables you to run the same file within SAS (to simply execute the commands) and through knitr (to produce Markdown and HTML files). This is particularly useful if you already have a number of *.sas files to which you'd like to add a little text to produce a document. 10.1 Special Markup Within your SAS command file (*.sas), you use the following symbols to denote plain Markdown text, SAS code chunks, R code chunks, and text to be dropped from the document. Notice that SAS will treat all of these as comments. **, a double asterisk, signals the beginning of document text. End with a semi-colon, ; at the end of a line. *+ , an asterisk-plus, signals the beginning of a code chunk, and specifies the code chunk options. End with a semi-colon. *R , an asterisk-R, signals the enclosed code is in R. End with a semi-colon. /**, comments to spin begin with slash-double-asterisk. These do not show up in your document. End with / at the end of a line. 10.2 Semi-colons No semi-colons at the ends of lines in your document text. Your chunk of SAS code must end with a semi-colon (not a block comment). 10.3 Example In order to run SAS code, first we load the SASmarkdown library so it can automatically set up some necessary options in R. *+ setup, message=FALSE ; *R library(SASmarkdown) ; Text is then included as a special comment. ** The report begins here.; Finally, the executable SAS code is given a line of chunk instructions. *+ example1, engine=&#39;sas&#39;, comment=NA; proc means data=sashelp.class /*(keep = age)*/; run; /* lines here are ignored by SAS. If at the end of your SAS code chunk they must be followed by a semi-colon. */ ; You can use the usual Markdown within the text sections. The entire document might be: *+ setup, message=FALSE ; *R library(SASmarkdown) ; ** The report begins here.; *+ example1, engine=&#39;sas&#39;, comment=NA; proc means data=sashelp.class /*(keep = age)*/; run; 10.4 Processing Set up an example file to use: indoc &lt;- &quot; *+ setup, message=FALSE ; *R library(SASmarkdown) ; ** The report begins here.; *+ example1, engine=&#39;sas&#39;, comment=NA; proc means data=sashelp.class /*(keep = age)*/; run; &quot; writeLines(indoc, &quot;indoc.sas&quot;) To process this document then, simply use library(SASmarkdown) spinsas(&quot;indoc.sas&quot;) Which gives a document, \"indoc.html\" that looks like the following: library(SASmarkdown) The report begins here. proc means data=sashelp.class /*(keep = age)*/; run; The MEANS Procedure Variable N Mean Std Dev Minimum Maximum ------------------------------------------------------------------------- Age 19 13.3157895 1.4926722 11.0000000 16.0000000 Height 19 62.3368421 5.1270752 51.3000000 72.0000000 Weight 19 100.0263158 22.7739335 50.5000000 150.0000000 ------------------------------------------------------------------------- Written using SASmarkdown version 0.8.0. knitr version 1.40. R version 4.2.2 (2022-10-31 ucrt). "]]
